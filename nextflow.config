/*
========================================================================================
    Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        params.enable_conda    = false
        docker.enabled         = true
        docker.userEmulation   = true
        apptainer.enabled      = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    Apptainer {
        singularity.enabled    = false
        params.enable_conda    = false
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        params.singularity_pull_docker_container = null
        apptainer.pullTimeout = 40
    }
    
    singularity {
        params.enable_conda    = false
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        //singularity.runOptions = "-B $baseDir/scripts/:/mnt"
        params.singularity_pull_docker_container = null
        singularity.pullTimeout = 40

    }

    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
 //   LOCAL_R_SCRITPS = "$baseDir/scripts/"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


// this allow to mount the scripts to the singularity image. name the folder something that you wont find in your machine by chance. ex. :/mnt :/tmp (DONT) use something like :/ProkGenomics_scripts instate
process{
   withLabel: mount_local_scripts {
        containerOptions = "-B $baseDir/scripts/:/ProkGenomics_scripts"
    }
}

// specific bash configurations for labelled processes
process{
   withLabel: mount_bash_basics {
        containerOptions = "-B /bin/bash"
    }
    withLabel: bash_var_zro_one {
        shell = '/bin/bash'
    }
}

// ensure that no user libraries get mounted into the container
//process.containerOptions = "--no-home"

manifest {
    name            = 'ProkGenomics'
    author          = 'Laura Perlaza-Jimenez'
    homePage        = 'https://github.com/Grinter-Lab/ProkGenomics'
    description     = 'Selfcontained nextflow pipeline to assemble, annotate, taxonomically identify, genotypic characterize and perform simple comparative genomics on prokaryotic sequencing data'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
